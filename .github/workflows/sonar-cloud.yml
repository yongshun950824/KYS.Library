name: SonarQube
permissions:
  contents: read
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Restore dependencies
        run: dotnet restore
        
      - name: Begin Sonar analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
            .\.sonar\scanner\dotnet-sonarscanner begin `
              /k:"yongshun950824_kys-library" `
              /o:"yongshun950824" `
              /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
              /d:sonar.coverageReportPaths="TestResults/coverage.cobertura.xml" `
              /d:sonar.exclusions=**/bin/**,**/obj/**,**/*.dll,**/*.csproj,**/Migrations/** `
              /d:sonar.coverage.exclusions="**/KYS.AspNetCore.Library/**,**/KYS.EFCore.Library/**" `
              /d:sonar.cpd.exclusions="**/Migrations/**,**/Generated/**"

      - name: Build
        run: dotnet build --no-incremental

      - name: Run tests with coverage
        run: |
            dotnet test --collect:"XPlat Code Coverage" --results-directory ./TestResults

            # Find the generated file (inside GUID folder) and move it
            $file = Get-ChildItem -Recurse -Filter coverage.cobertura.xml | Select-Object -First 1
            if (-not $file) {
              Write-Error "Coverage file not found!"
              exit 1
            }
            Write-Host "Found coverage at $($file.FullName)"
            Move-Item $file.FullName ./TestResults/coverage.cobertura.xml -Force
        shell: pwsh
    
      - name: End Sonar analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
            .\.sonar\scanner\dotnet-sonarscanner end `
              /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
        shell: powershell
